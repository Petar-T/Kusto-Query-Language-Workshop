// datatable

// Generates a datatable 
datatable (ID:int, FirstName:string, Lastname:string, DateEmployment:datetime, KnownBy:string)
[ 1,  'Thomas', 'Forsberg',datetime(2004-06-03),'Bathory'
, 2, 'Per Yngve', 'Ohlin', datetime(1991-04-08),'Mayhem'
, 3 , 'Petrus', 'Ratajczyk', datetime(2010-04-14), 'Carnivore'
, 4,  'Charles Michael', 'Schuldiner',  datetime(2001-12-13), 'Death'
, 5,  ' Ian Frasier', 'Kilmister',  datetime(2015-12-28), 'Lemmy'
, 6,  'Ronald James', 'Padavona',  datetime(2010-06-16), 'Dio'
, 7,  'Jeffrey John', 'Hanneman',  datetime(2013-05-02), 'Slayer'
, 8,  'Clifford Lee', 'Burton',  datetime(1986-09-27), 'Metallica'
]

let DeadPoetSociety = datatable (ID:int, FirstName:string, Lastname:string, DateEmployment:datetime, KnownBy:string)
[ 1,  'Thomas', 'Forsberg',datetime(2004-06-03),'Bathory'
, 2, 'Per Yngve', 'Ohlin', datetime(1991-04-08),'Mayhem'
, 3 , 'Petrus', 'Ratajczyk', datetime(2010-04-14), 'Carnivore'
, 4,  'Charles Michael', 'Schuldiner',  datetime(2001-12-13), 'Death'
, 5,  ' Ian Frasier', 'Kilmister',  datetime(2015-12-28), 'Lemmy'
, 6,  'Ronald James', 'Padavona',  datetime(2010-06-16), 'Dio'
, 7,  'Jeffrey John', 'Hanneman',  datetime(2013-05-02), 'Slayer'
, 8,  'Clifford Lee', 'Burton',  datetime(1986-09-27), 'Metallica'];

DeadPoetSociety 
| project FirstName, Lastname, KnownBy

////
let Bands= datatable (BandID:int, Name:string, country:string)
[1, 'Slayer', 'USA',
 2, 'Death','USA',
 3, 'Destruction','Germany',
 4, 'Kreator','Germany', 
 1, 'Slayer without Dave and jeff', 'USA' ];

let Albums= datatable (AlbumId:int , BandID:int, AlbumName:string, orderNum:int)
[1, 1, 'Show No Mercy',1,
 2, 1, 'Hell Awaits', 2,
 3, 1, 'Reign in Blood', 3,
 4, 4, 'Endless Pain', 1,
 5, 4, 'Pleasure to Kill', 1,
 6, 2, 'Human', 4,
 7, 2, 'Individual Thought Patterns', 5,
 8, 2, 'Symbolic', 6,
 9, 2, 'The Sound of Perseverance', 7,
 10, 5, 'Walls of Jericho', 2 ];

//Bands;
//Albums 

Bands 
| join Albums on BandID
 
//Bands 
//| join (Albums) on $left.BandID==$right.BandID

// fullouter 
// inner
// innerunique [DEFAULT] 
// leftanti 
// leftantisemi
// leftouter
// leftsemi
// rightanti
// rightantisemi
// rightouter
// rightsemi

Bands 
| join  kind = innerunique  (Albums) on $left.BandID==$right.BandID


//
let Bands= datatable (BandID:int, Name:string, country:string)
[1, 'Slayer', 'USA', 2, 'Death','USA', 3, 'Destruction','Germany', 4, 'Kreator','Germany',  1, 'Slayer without Dave and jeff', 'USA' ];

let Albums= datatable (AlbumId:int , BandID:int, AlbumName:string, orderNum:int)
[1, 1, 'Show No Mercy',1, 2, 1, 'Hell Awaits', 2, 3, 1, 'Reign in Blood', 3, 4, 4, 'Endless Pain', 1, 5, 4, 'Pleasure to Kill', 1, 6, 2, 'Human', 4, 7, 2, 'Individual Thought Patterns', 5, 8, 2, 'Symbolic', 6, 9, 2, 'The Sound of Perseverance', 7, 10, 5, 'Walls of Jericho', 2 ];

//Bands 
//| join  kind = innerunique (Albums) on $left.BandID==$right.BandID  // 1. innerunique, 
//| join  kind = inner  (Albums) on $left.BandID==$right.BandID  // 1. innerunique, 
//| join  kind = leftouter  (Albums) on $left.BandID==$right.BandID     // 2. leftouter 
//| join  kind = rightouter  (Albums) on $left.BandID==$right.BandID     // 2. rightouter 
//| join  kind = fullouter   (Albums) on $left.BandID==$right.BandID     // 2. fullouter 
//| project BandID, Name, AlbumName  

//Bands 
//| join  kind = leftanti (Albums) on $left.BandID==$right.BandID     // 2. fullouter 
//| project BandID, Name  

Bands 
| join  kind = rightanti  (Albums) on $left.BandID==$right.BandID     // 2. fullouter 
| project BandID  

//semi Joins are just showing colums from one table 
Bands 
| join  kind = leftsemi (Albums) on $left.BandID==$right.BandID  // 1. innerunique, 

// Cross-join 
Bands
| extend dummy=1 
| join kind=inner (Albums | extend dummy=1) on dummy




Perf
| take 1000
| join (Alert) on Computer


Perf
| where CounterName == "% Processor Time"
| where TimeGenerated >=ago(1m)
| project Computer 
        , CounterName 
        , CounterValue 
        , PerfTime=TimeGenerated 
| join ( Alert        
       | project Computer 
               , AlertName 
               , AlertDescription 
               , ThresholdOperator 
               , ThresholdValue 
               , AlertTime=TimeGenerated 
       | where AlertName contains "high processor usage" 
       )
    on Computer


   // --- UNION

UpdateSummary
| union Update



let CityUSA= datatable (CityID:int, Name:string, country:string)
[1, 'Seattle', 'USA', 2, 'Miami','USA', 3, 'NewYork','USA' ];

let CityNor= datatable (CityID:int, Name:string, country:string)
[101, 'Oslo', 'Nor', 102, 'Bergen','Nor' ];

CityUSA
| union CityNor

/////


let CityUSA= datatable (CityUSID:int, Name:string, country:string) //note column CityUSID 
[1, 'Seattle', 'USA', 2, 'Miami','USA', 3, 'NewYork','USA' ];

let CityNor= datatable (CityNorID:int, Name:string, country:string) //note column CityNorID
[101, 'Oslo', 'Nor', 102, 'Bergen','Nor' ];

CityUSA
| union CityNor

// or //

(CityUSA
| project Id = CityUSID, Name, country)
| union
( CityNor
| project Id = CityNorID, Name, country)

(CityUSA
| project CityUSID, Name, country)
| union withsource = "SourceTable"  // add column[0] to note from which table is coming 
( CityNor
| project CityNorID, Name, country)


CityUSA
| union withsource = "SourceTable" 
 CityNor

// pivot




SecurityAlert
| project AlertSeverity, ProviderName
| evaluate pivot(ProviderName)



SecurityAlert
| project AlertSeverity, ProviderName
| evaluate pivot(AlertSeverity)





///LET

Perf
| distinct CounterName 

// Asign  a constant value
let _minCounterValue = 50;
let _counterName = "% Processor Time";
Perf
| project Computer 
        , TimeGenerated 
        , CounterName 
        , CounterValue 
| where CounterName == _counterName
    and CounterValue <= _minCounterValue


//let will act as parametrisation
let From = datetime(2021-04-01);
let To = datetime(2021-04-05);
Perf
| where TimeGenerated between (From ..To)
| project Computer 
        , TimeGenerated 
        , CounterName 
        , CounterValue 



// or it be used to hold calculated values
let From = ago(12h);
let To = now();
Perf
| where TimeGenerated between (From ..To)
| project Computer 
        , TimeGenerated 
        , CounterName 
        , CounterValue 


// let can hold datasets, to make things like union more readable
let compName = "ContosoSQLSrv1";
let UpdtSum = UpdateSummary
  | where Computer == compName
  | project Computer
          , ComputerEnvironment
          , ManagementGroupName
          , OsVersion
          , Resource
          , ResourceGroup
          , SourceSystem
          , Type
          , NETRuntimeVersion;
let Updt = Update
  | where Computer == compName
  | project Computer
          , ComputerEnvironment
          , ManagementGroupName
          , OSVersion
          , Resource
          , ResourceGroup
          , SourceSystem
          , Type
          , Title
          , UpdateState;
union withsource = "SourceTable" 
      UpdtSum
    , Updt


//  let can hold a function
let date_Diff_In_Days = (date1: datetime, date2: datetime = datetime(2018-01-01))
                     { (date1 - date2) / 1d }
;
print date_Diff_In_Days(now(), todatetime("2021-04-01"))


// Here is an example where we take the default for date2
let date_Diff_In_Days2 = (date1: datetime, date2:datetime = datetime("2021-01-01"))            
                     { (date1 - date2) / 1d }
;
print date_Diff_In_Days2(now())

